<?php
/**
 * WebSearchPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.riskscreen.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * WebSearchPerson Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WebSearchPerson implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'WebSearchPerson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'middle_names' => 'string',
        'last_name_accuracy_percent' => 'int',
        'first_name_accuracy_percent' => 'int',
        'middle_names_accuracy_percent' => 'int',
        'reverse_name_search' => 'bool',
        'search_pep' => 'bool',
        'search_ref' => 'string',
        'search_watch_lists' => 'bool',
        'search_sanctions' => 'bool',
        'display_result_details' => 'bool',
        'display_filtered_results_only' => 'bool',
        'filters' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_name' => null,
        'last_name' => null,
        'middle_names' => null,
        'last_name_accuracy_percent' => 'int32',
        'first_name_accuracy_percent' => 'int32',
        'middle_names_accuracy_percent' => 'int32',
        'reverse_name_search' => null,
        'search_pep' => null,
        'search_ref' => null,
        'search_watch_lists' => null,
        'search_sanctions' => null,
        'display_result_details' => null,
        'display_filtered_results_only' => null,
        'filters' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'middle_names' => 'MiddleNames',
        'last_name_accuracy_percent' => 'LastNameAccuracyPercent',
        'first_name_accuracy_percent' => 'FirstNameAccuracyPercent',
        'middle_names_accuracy_percent' => 'MiddleNamesAccuracyPercent',
        'reverse_name_search' => 'ReverseNameSearch',
        'search_pep' => 'SearchPEP',
        'search_ref' => 'SearchRef',
        'search_watch_lists' => 'SearchWatchLists',
        'search_sanctions' => 'SearchSanctions',
        'display_result_details' => 'DisplayResultDetails',
        'display_filtered_results_only' => 'DisplayFilteredResultsOnly',
        'filters' => 'Filters'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'middle_names' => 'setMiddleNames',
        'last_name_accuracy_percent' => 'setLastNameAccuracyPercent',
        'first_name_accuracy_percent' => 'setFirstNameAccuracyPercent',
        'middle_names_accuracy_percent' => 'setMiddleNamesAccuracyPercent',
        'reverse_name_search' => 'setReverseNameSearch',
        'search_pep' => 'setSearchPep',
        'search_ref' => 'setSearchRef',
        'search_watch_lists' => 'setSearchWatchLists',
        'search_sanctions' => 'setSearchSanctions',
        'display_result_details' => 'setDisplayResultDetails',
        'display_filtered_results_only' => 'setDisplayFilteredResultsOnly',
        'filters' => 'setFilters'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'middle_names' => 'getMiddleNames',
        'last_name_accuracy_percent' => 'getLastNameAccuracyPercent',
        'first_name_accuracy_percent' => 'getFirstNameAccuracyPercent',
        'middle_names_accuracy_percent' => 'getMiddleNamesAccuracyPercent',
        'reverse_name_search' => 'getReverseNameSearch',
        'search_pep' => 'getSearchPep',
        'search_ref' => 'getSearchRef',
        'search_watch_lists' => 'getSearchWatchLists',
        'search_sanctions' => 'getSearchSanctions',
        'display_result_details' => 'getDisplayResultDetails',
        'display_filtered_results_only' => 'getDisplayFilteredResultsOnly',
        'filters' => 'getFilters'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_names'] = isset($data['middle_names']) ? $data['middle_names'] : null;
        $this->container['last_name_accuracy_percent'] = isset($data['last_name_accuracy_percent']) ? $data['last_name_accuracy_percent'] : null;
        $this->container['first_name_accuracy_percent'] = isset($data['first_name_accuracy_percent']) ? $data['first_name_accuracy_percent'] : null;
        $this->container['middle_names_accuracy_percent'] = isset($data['middle_names_accuracy_percent']) ? $data['middle_names_accuracy_percent'] : null;
        $this->container['reverse_name_search'] = isset($data['reverse_name_search']) ? $data['reverse_name_search'] : null;
        $this->container['search_pep'] = isset($data['search_pep']) ? $data['search_pep'] : null;
        $this->container['search_ref'] = isset($data['search_ref']) ? $data['search_ref'] : null;
        $this->container['search_watch_lists'] = isset($data['search_watch_lists']) ? $data['search_watch_lists'] : null;
        $this->container['search_sanctions'] = isset($data['search_sanctions']) ? $data['search_sanctions'] : null;
        $this->container['display_result_details'] = isset($data['display_result_details']) ? $data['display_result_details'] : null;
        $this->container['display_filtered_results_only'] = isset($data['display_filtered_results_only']) ? $data['display_filtered_results_only'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_names
     * @return string
     */
    public function getMiddleNames()
    {
        return $this->container['middle_names'];
    }

    /**
     * Sets middle_names
     * @param string $middle_names
     * @return $this
     */
    public function setMiddleNames($middle_names)
    {
        $this->container['middle_names'] = $middle_names;

        return $this;
    }

    /**
     * Gets last_name_accuracy_percent
     * @return int
     */
    public function getLastNameAccuracyPercent()
    {
        return $this->container['last_name_accuracy_percent'];
    }

    /**
     * Sets last_name_accuracy_percent
     * @param int $last_name_accuracy_percent
     * @return $this
     */
    public function setLastNameAccuracyPercent($last_name_accuracy_percent)
    {
        $this->container['last_name_accuracy_percent'] = $last_name_accuracy_percent;

        return $this;
    }

    /**
     * Gets first_name_accuracy_percent
     * @return int
     */
    public function getFirstNameAccuracyPercent()
    {
        return $this->container['first_name_accuracy_percent'];
    }

    /**
     * Sets first_name_accuracy_percent
     * @param int $first_name_accuracy_percent
     * @return $this
     */
    public function setFirstNameAccuracyPercent($first_name_accuracy_percent)
    {
        $this->container['first_name_accuracy_percent'] = $first_name_accuracy_percent;

        return $this;
    }

    /**
     * Gets middle_names_accuracy_percent
     * @return int
     */
    public function getMiddleNamesAccuracyPercent()
    {
        return $this->container['middle_names_accuracy_percent'];
    }

    /**
     * Sets middle_names_accuracy_percent
     * @param int $middle_names_accuracy_percent
     * @return $this
     */
    public function setMiddleNamesAccuracyPercent($middle_names_accuracy_percent)
    {
        $this->container['middle_names_accuracy_percent'] = $middle_names_accuracy_percent;

        return $this;
    }

    /**
     * Gets reverse_name_search
     * @return bool
     */
    public function getReverseNameSearch()
    {
        return $this->container['reverse_name_search'];
    }

    /**
     * Sets reverse_name_search
     * @param bool $reverse_name_search
     * @return $this
     */
    public function setReverseNameSearch($reverse_name_search)
    {
        $this->container['reverse_name_search'] = $reverse_name_search;

        return $this;
    }

    /**
     * Gets search_pep
     * @return bool
     */
    public function getSearchPep()
    {
        return $this->container['search_pep'];
    }

    /**
     * Sets search_pep
     * @param bool $search_pep
     * @return $this
     */
    public function setSearchPep($search_pep)
    {
        $this->container['search_pep'] = $search_pep;

        return $this;
    }

    /**
     * Gets search_ref
     * @return string
     */
    public function getSearchRef()
    {
        return $this->container['search_ref'];
    }

    /**
     * Sets search_ref
     * @param string $search_ref
     * @return $this
     */
    public function setSearchRef($search_ref)
    {
        $this->container['search_ref'] = $search_ref;

        return $this;
    }

    /**
     * Gets search_watch_lists
     * @return bool
     */
    public function getSearchWatchLists()
    {
        return $this->container['search_watch_lists'];
    }

    /**
     * Sets search_watch_lists
     * @param bool $search_watch_lists
     * @return $this
     */
    public function setSearchWatchLists($search_watch_lists)
    {
        $this->container['search_watch_lists'] = $search_watch_lists;

        return $this;
    }

    /**
     * Gets search_sanctions
     * @return bool
     */
    public function getSearchSanctions()
    {
        return $this->container['search_sanctions'];
    }

    /**
     * Sets search_sanctions
     * @param bool $search_sanctions
     * @return $this
     */
    public function setSearchSanctions($search_sanctions)
    {
        $this->container['search_sanctions'] = $search_sanctions;

        return $this;
    }

    /**
     * Gets display_result_details
     * @return bool
     */
    public function getDisplayResultDetails()
    {
        return $this->container['display_result_details'];
    }

    /**
     * Sets display_result_details
     * @param bool $display_result_details
     * @return $this
     */
    public function setDisplayResultDetails($display_result_details)
    {
        $this->container['display_result_details'] = $display_result_details;

        return $this;
    }

    /**
     * Gets display_filtered_results_only
     * @return bool
     */
    public function getDisplayFilteredResultsOnly()
    {
        return $this->container['display_filtered_results_only'];
    }

    /**
     * Sets display_filtered_results_only
     * @param bool $display_filtered_results_only
     * @return $this
     */
    public function setDisplayFilteredResultsOnly($display_filtered_results_only)
    {
        $this->container['display_filtered_results_only'] = $display_filtered_results_only;

        return $this;
    }

    /**
     * Gets filters
     * @return map[string,string]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     * @param map[string,string] $filters
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


